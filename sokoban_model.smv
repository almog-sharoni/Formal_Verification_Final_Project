
    MODULE main 
    DEFINE
        
        rows := 5;
        columns := 6;
        rows_minus_one := rows - 1;
        columns_minus_one := columns - 1;

        
    VAR
        
        --Cell: ('KEEPER', 'BOX', 'GOAL', 'KEEPER_ON_GOAL', 'BOX_ON_GOAL', 'WALL', 'FLOOR');

        --board : array 0..4 of array 0..5 of Cell;

        -- board : array 0..4 of array 0..5 of {"KEEPER", "BOX", "GOAL", "KEEPER_ON_GOAL", "#", "FLOOR", "BOX_ON_GOAL"}; 
        board : array -2..rows+1 of array -2..columns+1 of {"KEEPER", "BOX", "GOAL", "KEEPER_ON_GOAL","WALL" , "FLOOR", "BOX_ON_GOAL", "NULL"};  

        keeper_x : 0..rows_minus_one;
        keeper_y : 0..columns_minus_one;

        action : {u, d, l, r, 0};  

    

    ASSIGN
         
            init(action) := 0;
            init(keeper_x) := 2;
            init(keeper_y) := 3;

            
            -- padding in 'NULL' the values outside the board

            
                       init(board[-2][-2]) := "NULL";
                   
                       init(board[-2][-1]) := "NULL";
                   
                       init(board[-2][0]) := "NULL";
                   
                       init(board[-2][1]) := "NULL";
                   
                       init(board[-2][2]) := "NULL";
                   
                       init(board[-2][3]) := "NULL";
                   
                       init(board[-2][4]) := "NULL";
                   
                       init(board[-2][5]) := "NULL";
                   
                       init(board[-2][6]) := "NULL";
                   
                       init(board[-2][7]) := "NULL";
                   
                       init(board[-1][-2]) := "NULL";
                   
                       init(board[-1][-1]) := "NULL";
                   
                       init(board[-1][0]) := "NULL";
                   
                       init(board[-1][1]) := "NULL";
                   
                       init(board[-1][2]) := "NULL";
                   
                       init(board[-1][3]) := "NULL";
                   
                       init(board[-1][4]) := "NULL";
                   
                       init(board[-1][5]) := "NULL";
                   
                       init(board[-1][6]) := "NULL";
                   
                       init(board[-1][7]) := "NULL";
                   
                       init(board[0][-2]) := "NULL";
                   
                       init(board[0][-1]) := "NULL";
                   
                       init(board[0][0]) := "FLOOR";
                   
                       init(board[0][1]) := "FLOOR";
                   
                       init(board[0][2]) := "FLOOR";
                   
                       init(board[0][3]) := "FLOOR";
                   
                       init(board[0][4]) := "FLOOR";
                   
                       init(board[0][5]) := "FLOOR";
                   
                       init(board[0][6]) := "NULL";
                   
                       init(board[0][7]) := "NULL";
                   
                       init(board[1][-2]) := "NULL";
                   
                       init(board[1][-1]) := "NULL";
                   
                       init(board[1][0]) := "WALL";
                   
                       init(board[1][1]) := "FLOOR";
                   
                       init(board[1][2]) := "GOAL";
                   
                       init(board[1][3]) := "FLOOR";
                   
                       init(board[1][4]) := "FLOOR";
                   
                       init(board[1][5]) := "WALL";
                   
                       init(board[1][6]) := "NULL";
                   
                       init(board[1][7]) := "NULL";
                   
                       init(board[2][-2]) := "NULL";
                   
                       init(board[2][-1]) := "NULL";
                   
                       init(board[2][0]) := "WALL";
                   
                       init(board[2][1]) := "FLOOR";
                   
                       init(board[2][2]) := "BOX";
                   
                       init(board[2][3]) := "FLOOR";
                   
                       init(board[2][4]) := "FLOOR";
                   
                       init(board[2][5]) := "WALL";
                   
                       init(board[2][6]) := "NULL";
                   
                       init(board[2][7]) := "NULL";
                   
                       init(board[3][-2]) := "NULL";
                   
                       init(board[3][-1]) := "NULL";
                   
                       init(board[3][0]) := "WALL";
                   
                       init(board[3][1]) := "FLOOR";
                   
                       init(board[3][2]) := "KEEPER";
                   
                       init(board[3][3]) := "WALL";
                   
                       init(board[3][4]) := "FLOOR";
                   
                       init(board[3][5]) := "WALL";
                   
                       init(board[3][6]) := "NULL";
                   
                       init(board[3][7]) := "NULL";
                   
                       init(board[4][-2]) := "NULL";
                   
                       init(board[4][-1]) := "NULL";
                   
                       init(board[4][0]) := "FLOOR";
                   
                       init(board[4][1]) := "FLOOR";
                   
                       init(board[4][2]) := "FLOOR";
                   
                       init(board[4][3]) := "FLOOR";
                   
                       init(board[4][4]) := "FLOOR";
                   
                       init(board[4][5]) := "FLOOR";
                   
                       init(board[4][6]) := "NULL";
                   
                       init(board[4][7]) := "NULL";
                   
                       init(board[5][-2]) := "NULL";
                   
                       init(board[5][-1]) := "NULL";
                   
                       init(board[5][0]) := "NULL";
                   
                       init(board[5][1]) := "NULL";
                   
                       init(board[5][2]) := "NULL";
                   
                       init(board[5][3]) := "NULL";
                   
                       init(board[5][4]) := "NULL";
                   
                       init(board[5][5]) := "NULL";
                   
                       init(board[5][6]) := "NULL";
                   
                       init(board[5][7]) := "NULL";
                   
                       init(board[6][-2]) := "NULL";
                   
                       init(board[6][-1]) := "NULL";
                   
                       init(board[6][0]) := "NULL";
                   
                       init(board[6][1]) := "NULL";
                   
                       init(board[6][2]) := "NULL";
                   
                       init(board[6][3]) := "NULL";
                   
                       init(board[6][4]) := "NULL";
                   
                       init(board[6][5]) := "NULL";
                   
                       init(board[6][6]) := "NULL";
                   
                       init(board[6][7]) := "NULL";
                   
            next(keeper_x) := case
                (action = u) & keeper_x > 0 & (board[keeper_x - 1][keeper_y] = FLOOR | board[keeper_x - 1][keeper_y] = GOAL): keeper_x - 1;
                -- (action = u) & keeper_x > 1 & (board[keeper_x - 1][keeper_y] = "BOX" | board[keeper_x - 1][keeper_y] = "BOX_ON_GOAL") & (board[keeper_x - 2][keeper_y] = "FLOOR" | board[keeper_x - 2][keeper_y] = "GOAL") : keeper_x - 1
                (action = d) & keeper_x < rows - 1 & (board[keeper_x + 1][keeper_y] = FLOOR | board[keeper_x + 1][keeper_y] = GOAL): keeper_x + 1;
                -- (action = d) & keeper_x < rows - 2 & (board[keeper_x + 1][keeper_y] = "BOX" | board[keeper_x + 1][keeper_y] = "BOX_ON_GOAL") & (board[keeper_x + 2][keeper_y] = "FLOOR" | board[keeper_x + 2][keeper_y] =  "GOAL"): keeper_x + 1;
                TRUE: keeper_x;


            esac;

            next(keeper_y) := case
                (action = l) & keeper_y > 0 & (board[keeper_x][keeper_y - 1] = FLOOR | board[keeper_x][keeper_y - 1] = GOAL): keeper_y - 1;
                -- (action = l) &  keeper_y > 1 & (board[keeper_x][keeper_y - 1] = "BOX" | board[keeper_x][keeper_y - 1] = "BOX_ON_GOAL") & (board[keeper_x][keeper_y - 2] = "FLOOR" | board[keeper_x][keeper_y - 2] = "GOAL"): keeper_y - 1;
                (action = r) & keeper_y < columns - 1 & (board[keeper_x][keeper_y + 1] = FLOOR | board[keeper_x][keeper_y + 1] = GOAL): keeper_y + 1;
                -- (action = r) & keeper_y < columns - 2 & (board[keeper_x][keeper_y + 1] = "BOX" | board[keeper_x][keeper_y + 1] =  "BOX_ON_GOAL") & (board[keeper_x][keeper_y + 2] = "FLOOR" | board[keeper_x][keeper_y + 2] = "GOAL") : keeper_y + 1;
                TRUE: keeper_y;
            esac;

            next(board) :=
                case
                    (action = u) & keeper_x > 0 & (board[keeper_x - 1][keeper_y] = BOX | board[keeper_x - 1][keeper_y] = BOX_ON_GOAL) & (board[keeper_x - 2][keeper_y] = FLOOR | board[keeper_x - 2][keeper_y] = GOAL):
                    (case
                        board[keeper_x - 2][keeper_y] = FLOOR: (board[keeper_x - 2][keeper_y] := BOX; board[keeper_x - 1][keeper_y] := (board[keeper_x - 1][keeper_y] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        board[keeper_x - 2][keeper_y] = GOAL: (board[keeper_x - 2][keeper_y] := BOX_ON_GOAL; board[keeper_x - 1][keeper_y] := (board[keeper_x - 1][keeper_y] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        TRUE: board;
                    esac);

                    (action = d) & keeper_x < rows - 1 & (board[keeper_x + 1][keeper_y] = BOX | board[keeper_x + 1][keeper_y] = BOX_ON_GOAL) & (board[keeper_x + 2][keeper_y] = FLOOR | board[keeper_x + 2][keeper_y] = GOAL):
                    (case
                        board[keeper_x + 2][keeper_y] = FLOOR: (board[keeper_x + 2][keeper_y] := BOX; board[keeper_x + 1][keeper_y] := (board[keeper_x + 1][keeper_y] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        board[keeper_x + 2][keeper_y] = GOAL: (board[keeper_x + 2][keeper_y] := BOX_ON_GOAL; board[keeper_x + 1][keeper_y] := (board[keeper_x + 1][keeper_y] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        TRUE: board;
                    esac);

                    (action = l) & keeper_y > 0 & (board[keeper_x][keeper_y - 1] = BOX | board[keeper_x][keeper_y - 1] = BOX_ON_GOAL) & (board[keeper_x][keeper_y - 2] = FLOOR | board[keeper_x][keeper_y - 2] = GOAL):
                    (case
                        board[keeper_x][keeper_y - 2] = FLOOR: (board[keeper_x][keeper_y - 2] := BOX; board[keeper_x][keeper_y - 1] := (board[keeper_x][keeper_y - 1] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        board[keeper_x][keeper_y - 2] = GOAL: (board[keeper_x][keeper_y - 2] := BOX_ON_GOAL; board[keeper_x][keeper_y - 1] := (board[keeper_x][keeper_y - 1] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        TRUE: board;
                    esac);

                    (action = r) & keeper_y < columns - 1 & (board[keeper_x][keeper_y + 1] = BOX | board[keeper_x][keeper_y + 1] = BOX_ON_GOAL) & (board[keeper_x][keeper_y + 2] = FLOOR | board[keeper_x][keeper_y + 2] = GOAL):
                    (case
                        board[keeper_x][keeper_y + 2] = FLOOR: (board[keeper_x][keeper_y + 2] := BOX; board[keeper_x][keeper_y + 1] := (board[keeper_x][keeper_y + 1] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        board[keeper_x][keeper_y + 2] = GOAL: (board[keeper_x][keeper_y + 2] := BOX_ON_GOAL; board[keeper_x][keeper_y + 1] := (board[keeper_x][keeper_y + 1] = BOX_ON_GOAL) ? KEEPER_ON_GOAL: KEEPER); board[keeper_x][keeper_y] := (board[keeper_x][keeper_y] = KEEPER_ON_GOAL) ? GOAL: FLOOR;
                        TRUE: board;
                    esac);
                TRUE: board;
            esac;

     

    SPEC
    AG !(
        
    -- Win condition: all boxes are on goals

     board[1][2] = "BOX_ON_GOAL" 
    )

    